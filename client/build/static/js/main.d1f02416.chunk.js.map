{"version":3,"sources":["components/search.tsx","components/partner.tsx","http-common.ts","API.ts","components/app.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchComp","searchAction","useState","distanceKm","setFormData","className","onSubmit","e","onChange","parseInt","currentTarget","value","parseFloat","toFixed","type","min","step","placeholder","required","Partner","props","partner","offices","organization","map","office","console","log","location","address","require","config","axios","create","baseURL","process","headers","getFilteredPartners","distance","a","data","http","get","params","response","MainPage","filteredPartners","setFilteredPartners","useEffect","Fragment","preventDefault","then","final_partners","catch","err","length","id","filterPartners","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAMaA,EAA8B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC5C,EAAkCC,qBAAlC,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACE,qBAAKC,UAAU,UAAf,SACE,uBAAMA,UAAU,SAASC,SAAU,SAACC,GAAD,OAAON,EAAaM,EAAGJ,IAA1D,UACE,8FACA,8BAEE,uBAAOK,SAfI,SAACD,GACbE,SAASF,EAAEG,cAAcC,OAAS,EACrCP,EAAYQ,WAAWL,EAAEG,cAAcC,OAAOE,QAAQ,IAGxDN,EAAEG,cAAcC,MAAQ,IAWlBG,KAAK,SAASC,IAAI,IAAIC,KAAK,MAC3BC,YAAY,uBAAuBC,UAAQ,YCvBxCC,EAAmC,SAACC,GAC/C,IAAMC,EAAmBD,EAAMC,QACzBC,EAAuBD,EAAQC,QACrC,OACQ,+BACGD,EAAQE,aACX,6BACGD,EAAQE,KAAI,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GACL,mCAA4BA,EAAOG,SAAW,IAAOH,EAAOI,QAA5D,MAASJ,EAAOI,kB,wCCXrCC,EAAQ,IAAUC,SAEHC,UAAMC,OAAO,CAC1BC,QAASC,6BACTC,QAAS,CACP,eAAgB,sBCUPC,EAAmB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAEvBC,EAAO,CAAE,SAAaF,GAFC,SAGsBG,EAAKC,IAAI,oBAAsB,CAACC,OAAOH,IAH7D,cAGvBI,EAHuB,yBAItBA,GAJsB,sCAM3BlB,QAAQC,IAAI,+BACZD,QAAQC,IAAR,MAP2B,8DAAH,sDCTnBkB,EAAqB,WAEhC,MAA8C3C,mBAAqB,IAAnE,mBAAK4C,EAAL,KAAuBC,EAAvB,KAEAC,qBAAU,cAEP,IAuCH,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,EAAD,CAAYhD,aA9BK,SACnBM,GAEU,IADVJ,EACS,uDADY,IAErBI,EAAE2C,iBACFb,EAAoBlC,GACjBgD,MAAK,SAACP,GACL,IAAQJ,EAASI,EAATJ,KACRO,EAAoBP,EAAKY,mBAE1BC,OAAM,SAACC,GAAD,OAAgB5B,QAAQC,IAAI,eAGvC,WAEE,GAD8BmB,EAAiBS,OAAS,EAEtD,OACE,sBAAKlD,UAAU,SAAf,UACE,8CACA,6BACGyC,EAAiBtB,KAAI,SAACH,GACrB,OAAO,cAAC,EAAD,CAASA,QAASA,GAAcA,EAAQmC,YAUtDC,OC3CQC,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d1f02416.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\ntype Props = { \n  searchAction: (e: React.FormEvent, distanceKm: string | undefined) => void \n}\n\nexport const SearchComp: React.FC<Props> = ({ searchAction }) => {\n  const [distanceKm, setFormData] = useState<string | undefined>()\n\n  const handleForm = (e: React.FormEvent<HTMLInputElement>): void => {\n    if ( parseInt(e.currentTarget.value) > 0 ) {\n      setFormData(parseFloat(e.currentTarget.value).toFixed(2));\n      \n    }else{\n    e.currentTarget.value = ''  ;\n    }\n  }\n\n  return (\n    <div className=\"flexbox\">\n      <form className=\"search\" onSubmit={(e) => searchAction(e, distanceKm)}>\n        <h3>Click on search icon, then type the distance of the rang ...</h3>\n        <div>\n\n          <input onChange={handleForm}\n          type=\"number\" min=\"0\" step=\".01\"\n          placeholder=\"Range Distance in KM\" required />\n\n        </div>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport{IPartner, OfficeType, IPartnerProps } from '../types';\n\nexport const Partner: React.FC<IPartnerProps> = (props) => {\n  const partner:IPartner = props.partner;\n  const offices:OfficeType[] = partner.offices;\n  return (\n          <li>\n            {partner.organization}\n          <ol>\n            {offices.map((office) => {\n              console.log(office)\n              return <li key={office.address}> { office.location + '/' +  office.address} </li>\n            })}\n          </ol>\n        </li>\n  );\n};\n","import axios from \"axios\";\nrequire(\"dotenv\").config();\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000/api/\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import { AxiosResponse } from \"axios\";\nimport {ApiDataType} from \"./types\";\nimport http from \"./http-common\";\n\n\nexport const getAllPartners = async ():  Promise<AxiosResponse<ApiDataType>> => {\n    try {\n        const response: AxiosResponse<ApiDataType> = await http.get('all_partners')\n        return response;\n      } catch (error) {\n          console.log(\"error in api / get all\")\n        throw error;\n      }\n};\n\n\nexport const getFilteredPartners = async (distance:string):  Promise<AxiosResponse<ApiDataType>> => {\n  try {\n      const data = { 'distance' : distance };\n      const response: AxiosResponse<ApiDataType> = await http.get('filtered_partners' , {params:data})\n      return response;\n    } catch (error) {\n        console.log(\"error in api / get filtered\")\n        console.log(error)\n      throw error;\n    }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { SearchComp } from \"./search\";\nimport { Partner } from \"./partner\";\n//import { getAllPartners , getFilteredPartners } from \"../API\";\nimport { getFilteredPartners } from \"../API\";\nimport{IPartner } from '../types';\n\nexport const MainPage: React.FC = () => {\n  //const [partners, setPartners] = useState<IPartner[]>([]);\n  let [filteredPartners, setFilteredPartners] = useState<IPartner[]>([]);\n\n  useEffect(() => {\n    //fetchPartners();\n  }, []);\n\n/*   const fetchPartners = (): void => {\n    getAllPartners()\n      .then((response) => {\n        const { data } = response;\n        setPartners(data.final_partners);\n      })\n      .catch((err: Error) => console.log(\"error\"));\n  }; */\n\n  const handleSearch = (\n    e: React.FormEvent,\n    distanceKm: string = '0'\n  ): void => {\n    e.preventDefault();\n    getFilteredPartners(distanceKm)\n      .then((response) => {\n        const { data } = response;\n        setFilteredPartners(data.final_partners);\n      })\n      .catch((err: Error) => console.log(\"error\"));\n  };\n\n  function filterPartners() {\n    const showPartners: boolean = filteredPartners.length > 0;\n    if (showPartners) {\n      return (\n        <div className=\"result\">\n          <h4>Results Here</h4>\n          <ol>\n            {filteredPartners.map((partner: IPartner) => {\n              return <Partner partner={partner} key={partner.id} />;\n            })}\n          </ol>\n        </div>\n      );\n    }\n  }\n  return (\n    <React.Fragment>\n      <SearchComp searchAction={handleSearch} />\n      {filterPartners()}\n    </React.Fragment>\n  );\n};\n","import './App.css';\nimport './css/index.css';\nimport './css/result.css';\n\nimport { MainPage } from \"./components/app\";\n\nfunction App() {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}